import fs from 'fs/promises'
import path from 'path'
import { InstitutionProfile } from './specParser'

// 5-Stage Analysis Results
export interface StageAResult {
  products: Array<{
    √ºr√ºn: string
    gram: number
    birim: string
    sayfa: number
    g√ºven: number
  }>
}

export interface StageBResult {
  √∂zel_ko≈üullar: string[]
  hijyen_ko≈üullar: string[]
  servis_ko≈üullar: string[]
  sayfa_referanslarƒ±: number[]
}

export interface StageCResult {
  kurum: string
  kurumKodu: string
  men√º_tipi: string
  ogunSayisi: number
  kisiSayisi: number
  porsiyon: Record<string, number>
  √∂zel_ko≈üullar: string[]
  hijyen_ko≈üullar: string[]
  servis_ko≈üullar: string[]
  maliyet_siniri: { minimum?: number, maksimum?: number }
  teslim_ko≈üullar: { adres?: string, sƒ±klƒ±k?: string }
  g√ºven: number
}

export interface StageDResult extends StageCResult {
  g√ºven_ortalamasƒ±: number
  merge_notlari: string[]
}

export interface StageEResult {
  kar≈üƒ±la≈ütƒ±rƒ±lan_kurum: string
  'benzerlik_%': number
  benzer_nitelikler: string[]
  farklƒ±_nitelikler: string[]
  g√ºven_skoru: number
  √∂neri: string
}

export class EnhancedSpecParser {
  private promptsPath: string

  constructor() {
    this.promptsPath = path.join(process.cwd(), 'lib', 'prompts')
  }

  // Ana analiz fonksiyonu - 5 stage'i √ßalƒ±≈ütƒ±rƒ±r
  async analyzeSpecificationEnhanced(
    text: string, 
    fileName: string,
    existingProfiles: any[] = []
  ): Promise<{
    stageA: StageAResult
    stageB: StageBResult  
    stageC: StageCResult
    stageD?: StageDResult
    stageE?: StageEResult[]
    finalProfile: InstitutionProfile
  }> {
    
    // B√ºy√ºk metni chunk'lara b√∂l (10 sayfa ~ 5000 karakter)
    const chunks = this.chunkText(text, 5000)
    console.log(`üìë Metin ${chunks.length} par√ßaya b√∂l√ºnd√º`)

    const chunkResults: StageCResult[] = []

    // Her chunk i√ßin Stage A ‚Üí B ‚Üí C i≈ülemi
    for (let i = 0; i < chunks.length; i++) {
      console.log(`üîç Chunk ${i + 1}/${chunks.length} analiz ediliyor...`)
      
      const stageA = await this.runStageA(chunks[i])
      const stageB = await this.runStageB(chunks[i])
      const stageC = await this.runStageC(stageA, stageB, chunks[i])
      
      chunkResults.push(stageC)
    }

    // Stage D: Chunk'larƒ± birle≈ütir (eƒüer birden fazla varsa)
    let finalResult: StageCResult | StageDResult
    if (chunkResults.length > 1) {
      console.log(`üîó ${chunkResults.length} chunk birle≈ütiriliyor...`)
      finalResult = await this.runStageD(chunkResults)
    } else {
      finalResult = chunkResults[0]
    }

    // Stage E: Benzerlik analizi (eƒüer mevcut profil varsa)
    let stageEResults: StageEResult[] = []
    if (existingProfiles.length > 0) {
      console.log(`üîç ${existingProfiles.length} mevcut profil ile kar≈üƒ±la≈ütƒ±rƒ±lƒ±yor...`)
      stageEResults = await this.runStageE(finalResult, existingProfiles)
    }

    // Final profile'ƒ± InstitutionProfile formatƒ±na d√∂n√º≈üt√ºr
    const institutionProfile = this.convertToInstitutionProfile(finalResult, fileName)

    return {
      stageA: chunkResults[0] ? { products: [] } : { products: [] }, // ƒ∞lk chunk'ƒ±n stage A sonucu
      stageB: chunkResults[0] ? { 
        √∂zel_ko≈üullar: finalResult.√∂zel_ko≈üullar,
        hijyen_ko≈üullar: finalResult.hijyen_ko≈üullar, 
        servis_ko≈üullar: finalResult.servis_ko≈üullar,
        sayfa_referanslarƒ±: []
      } : { √∂zel_ko≈üullar: [], hijyen_ko≈üullar: [], servis_ko≈üullar: [], sayfa_referanslarƒ±: [] },
      stageC: chunkResults[0] || finalResult,
      stageD: chunkResults.length > 1 ? finalResult as StageDResult : undefined,
      stageE: stageEResults,
      finalProfile: institutionProfile
    }
  }

  // Stage A: Gramaj √ßƒ±karƒ±mƒ±
  private async runStageA(text: string): Promise<StageAResult> {
    const prompt = await this.loadPrompt('prompt_stageA_extraction.txt')
    const filledPrompt = prompt.replace('{text}', text)
    
    try {
      const claudeService = new (await import('./claude')).ClaudeService()
      const response = await claudeService.generateRecipeAnalysis(filledPrompt)
      
      // JSON parse et - response'dan text √ßƒ±kar
      const responseText = JSON.stringify(response)
      const jsonMatch = responseText.match(/\[(.*?)\]/)
      if (jsonMatch) {
        const products = JSON.parse(jsonMatch[0])
        return { products }
      }
      
      return { products: [] }
    } catch (error) {
      console.error('Stage A hatasƒ±:', error)
      return { products: [] }
    }
  }

  // Stage B: √ñzel ko≈üullar
  private async runStageB(text: string): Promise<StageBResult> {
    const prompt = await this.loadPrompt('prompt_stageB_rules.txt')
    const filledPrompt = prompt.replace('{text}', text)
    
    try {
      const claudeService = new (await import('./claude')).ClaudeService()
      const response = await claudeService.generateRecipeAnalysis(filledPrompt)
      
      // JSON parse et - response'dan text √ßƒ±kar
      const responseText = JSON.stringify(response)
      const jsonMatch = responseText.match(/\{[\s\S]*?\}/)
      if (jsonMatch) {
        const result = JSON.parse(jsonMatch[0])
        return {
          √∂zel_ko≈üullar: result.√∂zel_ko≈üullar || [],
          hijyen_ko≈üullar: result.hijyen_ko≈üullar || [],
          servis_ko≈üullar: result.servis_ko≈üullar || [],
          sayfa_referanslarƒ±: result.sayfa_referanslarƒ± || []
        }
      }
      
      return {
        √∂zel_ko≈üullar: [],
        hijyen_ko≈üullar: [], 
        servis_ko≈üullar: [],
        sayfa_referanslarƒ±: []
      }
    } catch (error) {
      console.error('Stage B hatasƒ±:', error)
      return {
        √∂zel_ko≈üullar: [],
        hijyen_ko≈üullar: [],
        servis_ko≈üullar: [],
        sayfa_referanslarƒ±: []
      }
    }
  }

  // Stage C: Profil birle≈ütirme
  private async runStageC(
    stageA: StageAResult, 
    stageB: StageBResult, 
    originalText: string
  ): Promise<StageCResult> {
    const prompt = await this.loadPrompt('prompt_stageC_profile.txt')
    const filledPrompt = prompt
      .replace('{stageA_output}', JSON.stringify(stageA))
      .replace('{stageB_output}', JSON.stringify(stageB))
      .replace('{original_text}', originalText.slice(0, 1000)) // ƒ∞lk 1000 karakter

    try {
      const claudeService = new (await import('./claude')).ClaudeService()
      const response = await claudeService.generateRecipeAnalysis(filledPrompt)
      
      // JSON parse et - response'dan text √ßƒ±kar  
      const responseText = JSON.stringify(response)
      const jsonMatch = responseText.match(/\{[\s\S]*?\}/)
      if (jsonMatch) {
        const result = JSON.parse(jsonMatch[0])
        
        return {
          kurum: result.kurum || 'Bilinmeyen Kurum',
          kurumKodu: result.kurumKodu || '',
          men√º_tipi: result.men√º_tipi || 'Standart',
          ogunSayisi: result.ogunSayisi || 1,
          kisiSayisi: result.kisiSayisi || 100,
          porsiyon: result.porsiyon || {},
          √∂zel_ko≈üullar: result.√∂zel_ko≈üullar || [],
          hijyen_ko≈üullar: result.hijyen_ko≈üullar || [],
          servis_ko≈üullar: result.servis_ko≈üullar || [],
          maliyet_siniri: result.maliyet_siniri || {},
          teslim_ko≈üullar: result.teslim_ko≈üullar || {},
          g√ºven: result.g√ºven || 0.5
        }
      }
      
      throw new Error('JSON parse edilemedi')
    } catch (error) {
      console.error('Stage C hatasƒ±:', error)
      
      // Fallback profil
      return {
        kurum: 'Analiz Hatasƒ±',
        kurumKodu: 'ERR-001',
        men√º_tipi: 'Belirsiz',
        ogunSayisi: 1,
        kisiSayisi: 100,
        porsiyon: { et: 100, sebze: 50, pirinc: 80 },
        √∂zel_ko≈üullar: [],
        hijyen_ko≈üullar: [],
        servis_ko≈üullar: [],
        maliyet_siniri: {},
        teslim_ko≈üullar: {},
        g√ºven: 0.2
      }
    }
  }

  // Stage D: Chunk birle≈ütirme
  private async runStageD(chunks: StageCResult[]): Promise<StageDResult> {
    const prompt = await this.loadPrompt('prompt_stageD_merge.txt')
    const filledPrompt = prompt
      .replace('{chunk1}', JSON.stringify(chunks[0] || {}))
      .replace('{chunk2}', JSON.stringify(chunks[1] || {}))
      .replace('{chunk3}', JSON.stringify(chunks[2] || {}))
      .replace('{chunk4}', JSON.stringify(chunks[3] || {}))
      .replace('{chunk5}', JSON.stringify(chunks[4] || {}))

    try {
      const claudeService = new (await import('./claude')).ClaudeService()
      const response = await claudeService.generateRecipeAnalysis(filledPrompt)
      
      // JSON parse et - response'dan text √ßƒ±kar
      const responseText = JSON.stringify(response)
      const jsonMatch = responseText.match(/\{[\s\S]*?\}/)
      if (jsonMatch) {
        const result = JSON.parse(jsonMatch[0])
        
        return {
          ...result,
          g√ºven_ortalamasƒ±: result.g√ºven_ortalamasƒ± || 
            chunks.reduce((sum, c) => sum + c.g√ºven, 0) / chunks.length,
          merge_notlari: result.merge_notlari || [`${chunks.length} chunk birle≈ütirildi`]
        }
      }
      
      // Manuel birle≈ütirme fallback
      return this.manualMergeChunks(chunks)
    } catch (error) {
      console.error('Stage D hatasƒ±:', error)
      return this.manualMergeChunks(chunks)
    }
  }

  // Stage E: Benzerlik analizi
  private async runStageE(
    newProfile: StageCResult | StageDResult, 
    existingProfiles: any[]
  ): Promise<StageEResult[]> {
    const prompt = await this.loadPrompt('prompt_stageE_similarity.txt')
    const filledPrompt = prompt
      .replace('{new_profile}', JSON.stringify(newProfile))
      .replace('{existing_profiles}', JSON.stringify(existingProfiles))

    try {
      const claudeService = new (await import('./claude')).ClaudeService()
      const response = await claudeService.generateRecipeAnalysis(filledPrompt)
      
      // JSON parse et - response'dan text √ßƒ±kar
      const responseText = JSON.stringify(response)
      const jsonMatch = responseText.match(/\[[\s\S]*?\]/)
      if (jsonMatch) {
        const results = JSON.parse(jsonMatch[0])
        return results
      }
      
      return []
    } catch (error) {
      console.error('Stage E hatasƒ±:', error)
      return []
    }
  }

  // Yardƒ±mcƒ± fonksiyonlar
  private async loadPrompt(fileName: string): Promise<string> {
    const filePath = path.join(this.promptsPath, fileName)
    return await fs.readFile(filePath, 'utf-8')
  }

  private chunkText(text: string, maxChunkSize: number): string[] {
    const chunks: string[] = []
    for (let i = 0; i < text.length; i += maxChunkSize) {
      chunks.push(text.slice(i, i + maxChunkSize))
    }
    return chunks
  }

  private manualMergeChunks(chunks: StageCResult[]): StageDResult {
    // En sƒ±k ge√ßen kurum adƒ±
    const kurumCount: Record<string, number> = {}
    chunks.forEach(c => {
      kurumCount[c.kurum] = (kurumCount[c.kurum] || 0) + 1
    })
    const kurum = Object.keys(kurumCount).reduce((a, b) => 
      kurumCount[a] > kurumCount[b] ? a : b
    )

    // Porsiyon ortalamalarƒ±
    const porsiyonKeys = new Set<string>()
    chunks.forEach(c => Object.keys(c.porsiyon).forEach(k => porsiyonKeys.add(k)))
    
    const porsiyon: Record<string, number> = {}
    porsiyonKeys.forEach(key => {
      const values = chunks
        .map(c => c.porsiyon[key])
        .filter(v => v != null && v > 0)
      
      if (values.length > 0) {
        porsiyon[key] = values.reduce((a, b) => a + b, 0) / values.length
      }
    })

    // Diƒüer alanlarƒ± birle≈ütir
    const allOzelKosullar = chunks.flatMap(c => c.√∂zel_ko≈üullar)
    const allHijyenKosullar = chunks.flatMap(c => c.hijyen_ko≈üullar)  
    const allServisKosullar = chunks.flatMap(c => c.servis_ko≈üullar)

    return {
      kurum,
      kurumKodu: chunks[0].kurumKodu,
      men√º_tipi: chunks[0].men√º_tipi,
      ogunSayisi: chunks[0].ogunSayisi,
      kisiSayisi: Math.round(chunks.reduce((sum, c) => sum + c.kisiSayisi, 0) / chunks.length),
      porsiyon,
      √∂zel_ko≈üullar: allOzelKosullar.filter((item, index) => allOzelKosullar.indexOf(item) === index),
      hijyen_ko≈üullar: allHijyenKosullar.filter((item, index) => allHijyenKosullar.indexOf(item) === index),
      servis_ko≈üullar: allServisKosullar.filter((item, index) => allServisKosullar.indexOf(item) === index),
      maliyet_siniri: chunks[0].maliyet_siniri,
      teslim_ko≈üullar: chunks[0].teslim_ko≈üullar,
      g√ºven: chunks.reduce((sum, c) => sum + c.g√ºven, 0) / chunks.length,
      g√ºven_ortalamasƒ±: chunks.reduce((sum, c) => sum + c.g√ºven, 0) / chunks.length,
      merge_notlari: [`${chunks.length} chunk manuel birle≈ütirildi`]
    }
  }

  private convertToInstitutionProfile(
    result: StageCResult | StageDResult, 
    fileName: string
  ): InstitutionProfile {
    return {
      kurum: result.kurum,
      kurumKodu: result.kurumKodu,
      tarih: new Date(),
      porsiyon: {
        et: result.porsiyon.et || 100,
        tavuk: result.porsiyon.tavuk,
        sebze: result.porsiyon.sebze || 50,
        yag: result.porsiyon.yag || 15,
        tuz: result.porsiyon.tuz || 2,
        pirinc: result.porsiyon.pirinc,
        bulgur: result.porsiyon.bulgur,
        ekmek: result.porsiyon.ekmek
      },
      menuTipi: result.men√º_tipi,
      ogunSayisi: result.ogunSayisi,
      kisiSayisi: result.kisiSayisi,
      ozelKosullar: result.√∂zel_ko≈üullar,
      hijyenKosullar: result.hijyen_ko≈üullar,
      servisKosullar: result.servis_ko≈üullar,
      maliyetSiniri: {
        minimum: result.maliyet_siniri.minimum,
        maksimum: result.maliyet_siniri.maksimum
      },
      teslimKosullar: {
        adres: result.teslim_ko≈üullar.adres,
        sƒ±klƒ±k: result.teslim_ko≈üullar.sƒ±klƒ±k
      },
      metadata: {
        processedAt: new Date(),
        confidence: result.g√ºven,
        sourceFile: fileName
      }
    }
  }
}